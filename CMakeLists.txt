cmake_minimum_required (VERSION 3.10)
add_definitions("-Wall -std=c++11")
project(ManualCalibration)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")


include_directories(
	nanogui/include
	include
	json/include
	lib_utils
)

add_executable(${PROJECT_NAME} src/main.cpp
src/functions.cpp
lib_utils/basicPly/BasicPly.cpp
lib_utils/image_utility/image_utility.cpp
lib_utils/utility/utility.cpp
)


find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME}  ${OPENGL_LIBRARIES})
# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(${PROJECT_NAME} nanogui ${NANOGUI_EXTRA_LIBS})
